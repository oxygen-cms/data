<?php

namespace Oxygen\Data\Validation\Laravel;

use Illuminate\Contracts\Hashing\Hasher;
use Illuminate\Contracts\Support\DeferrableProvider;
use Illuminate\Contracts\Translation\Translator;
use Illuminate\Support\ServiceProvider;

class ValidationServiceProvider extends ServiceProvider implements DeferrableProvider {

    /**
     * Bootstrap the application events.
     *
     * @return void
     */
    public function boot() {
        $app = $this->app;

        $this->app['validator']->resolver(function(Translator $translator, array $data, array $rules, array $messages, array $customAttributes) use($app) {
            $validator = new Validator(
                $translator,
                $app[Hasher::class],
                $app['view'],
                $app['router'],
                $data,
                $rules,
                $messages,
                $customAttributes
            );
            return $validator;
        });
    }

    public function register() {
        parent::register(); // TODO: Change the autogenerated stub
        $this->registerPresenceVerifier();
    }

    /**
     * Register the database presence verifier.
     *
     * @return void
     */
    protected function registerPresenceVerifier() {
        $this->app->singleton('validation.presence', function ($app) {
            return new DoctrinePresenceVerifier($app['registry']);
        });
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides() {
        return [
            'validator', 'validation.presence',
        ];
    }

}


    /**
     * Register the validation factory.
     *
     * @return void
     */
//    protected function registerValidationFactory() {
//        $this->app->singleton('validator', function ($app) {
//            $validator = new Factory($app['translator'], $app);
//
//            // The validation presence verifier is responsible for determining the existence
//            // of values in a given data collection, typically a relational database or
//            // other persistent data stores. And it is used to check for uniqueness.
//            if(isset($app['validation.presence'])) {
//                $validator->setPresenceVerifier($app['validation.presence']);
//            }
//
//            return $validator;
//        });
//    }
//
//